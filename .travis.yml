os: linux
language: shell

stages:
  - name: Perform tests
  - name: Prepare artifact
    if: branch = master && type != cron
  - name: Deploy
    if: branch = master && type != cron

services:
  - docker

install:
  - sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse"
  - sudo apt-get -qq update
  - sudo apt-get -t trusty-backports install shellcheck
  - sudo pip install awscli  

jobs:
  include:
    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - mkdir /tmp/config-custom
        - docker pull almerhor/pylint:default
        - docker run --rm -v $(pwd):/pylint -v $(pwd)/test:/tmp/config-custom almerhor/pylint:default py/CloudControlMainFunction.py requirements-custom.txt

    - stage: Perform tests
      os: linux
      language: java
      addons:
        sonarcloud:
          organization: "alexa-cloud-control"
          token: 
            secure: "uMpEgy4SB6FAUQKvXT/HKj35/n397lDR+YWSCQJbtleLVgkkEUo9aGmBGi1/PFEaCQJvf5PAY6xy6qnfx3ssTEMSJqiwfyd7BETCqEXgs8gbrod7YDnNTyae78A0FU0FPkcE3H3MfSGEKP3qnSfpFzJNHjQDAjNgn+Cz9+Yln3LR2YI5YWhtBzDeViTNev/Ac7GGsIXeSAwyUuM3VWbDPABvnPtJ2H17Ng40SCQxKtnGkyR1/8uM2xejoUq1lCc5128BMidJqpdnHdvkR0kJpijtlLOkN1LzgQotz7oCYRCk4r6Vn1hXA8bOt4bXfrtjU1cMoVevmDEzL+t9p+unGA9q8z+tMqYr4Lcpn6LDj/uvddFnzali1mJ7ZpuqEdlyDWrNBkeb+rlCnlhLd4Wj5n+HkHU/BPNQoXb82HbpMwD7r2HqkLjorTYq0bFhbfB3e/IAFGdgz/9ggdLavxyySwDQ8FhOaCcAMbhmGndPmePCru2g4Nwf2ksY5NH46FYkydGtISwWa2LaygRGIaJMUNqk4dChqABKcyGG3XpahYskSSiaZJqJJUARuK6trdrRuk7g13acPXCwW2phzwxmpQ72GSt4wzFC9yxhsWXx5zun+F69uXqmYX285ZvMDa60LnZkHAzoFRD9YmynVN/cPp9FR2JuKE+uS/q4Tr+bSB8="
    
      script:
        - sonar-scanner -X

    - stage: Perform tests
      script:
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CloudControl-Main-Function.yml
        - sed -i -e "s/SOURCESKILLARN/${skill_arn}/g" Alexa-CloudControl-Main-Function.yml
        - aws cloudformation validate-template --region ${terraform_region} --template-body file://Alexa-CloudControl-Main-Function.yml

    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CloudControl-Main-Function.yml
        - sed -i -e "s/SOURCESKILLARN/${skill_arn}/g" Alexa-CloudControl-Main-Function.yml
        - docker pull almerhor/cfnlint:latest
        - docker run --rm -v $(pwd)/:/lintfiles almerhor/cfnlint -t Alexa-CloudControl-Main-Function.yml

    - stage: Prepare artifact
      os: linux
      language: python
      python:
        - "3.6"
      script:
        - echo "Building package"
        - cd artifacts/scripts
        - chmod +x *.sh
        - ./env_prep.sh
        - cd ../..
        - echo "Send artifact to S3"
      deploy:
        - provider: s3
          bucket: "${artifact_bucket}"
          local_dir: artifacts/package
          skip_cleanup: true

    - stage: Deploy
      script:
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CloudControl-Main-Function.yml
        - sed -i -e "s/SOURCESKILLARN/${alexa_skill_id}/g" Alexa-CloudControl-Main-Function.yml
      deploy:
        provider: cloudformation
        edge: true # use DPLv2
        access_key_id: ${AWS_ACCESS_KEY_ID}
        secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        capabilities: CAPABILITY_NAMED_IAM
        template: Alexa-CloudControl-Main-Function.yml
        stack_name: Alexa-CC-Main-Function
        region: ${terraform_region}
        wait: true
        promote: true
